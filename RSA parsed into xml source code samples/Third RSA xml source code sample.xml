<root type='CompilationUnit'><imports><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='BigInteger'><qualifier type='Name' identifier='math'><qualifier type='Name' identifier='java'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='SecureRandom'><qualifier type='Name' identifier='security'><qualifier type='Name' identifier='java'></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='RSA'></name><members><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier><modifier type='Modifier' keyword='FINAL'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type><arguments><argument type='StringLiteralExpr' value='1'></argument></arguments></initializer><name type='SimpleName' identifier='one'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier><modifier type='Modifier' keyword='FINAL'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='SecureRandom'></name></type></initializer><name type='SimpleName' identifier='random'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='SecureRandom'></name></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='privateKey'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='publicKey'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></variable></variables></member><member type='FieldDeclaration'><modifiers><modifier type='Modifier' keyword='PRIVATE'></modifier></modifiers><variables><variable type='VariableDeclarator'><name type='SimpleName' identifier='modulus'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></variable></variables></member><member type='ConstructorDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='probablePrime'></name><scope type='NameExpr'><name type='SimpleName' identifier='BigInteger'></name></scope><arguments><argument type='BinaryExpr' operator='DIVIDE'><left type='NameExpr'><name type='SimpleName' identifier='N'></name></left><right type='IntegerLiteralExpr' value='2'></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='random'></name></argument></arguments></initializer><name type='SimpleName' identifier='p'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='probablePrime'></name><scope type='NameExpr'><name type='SimpleName' identifier='BigInteger'></name></scope><arguments><argument type='BinaryExpr' operator='DIVIDE'><left type='NameExpr'><name type='SimpleName' identifier='N'></name></left><right type='IntegerLiteralExpr' value='2'></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='random'></name></argument></arguments></initializer><name type='SimpleName' identifier='q'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='multiply'></name><scope type='EnclosedExpr'><inner type='MethodCallExpr'><name type='SimpleName' identifier='subtract'></name><scope type='NameExpr'><name type='SimpleName' identifier='p'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='one'></name></argument></arguments></inner></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='subtract'></name><scope type='NameExpr'><name type='SimpleName' identifier='q'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='one'></name></argument></arguments></argument></arguments></initializer><name type='SimpleName' identifier='phi'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='modulus'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='multiply'></name><scope type='NameExpr'><name type='SimpleName' identifier='p'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='q'></name></argument></arguments></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='publicKey'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type><arguments><argument type='StringLiteralExpr' value='65537'></argument></arguments></value></expression><comment type='LineComment' content=' common value in practice = 2^16 + 1'></comment></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='privateKey'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='modInverse'></name><scope type='NameExpr'><name type='SimpleName' identifier='publicKey'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='phi'></name></argument></arguments></value></expression></statement></statements></body><name type='SimpleName' identifier='RSA'></name><comment type='LineComment' content=' generate an N-bit (roughly) public and private key'></comment><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='N'></name><type type='PrimitiveType' identifier='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='modPow'></name><scope type='NameExpr'><name type='SimpleName' identifier='message'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='publicKey'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='modulus'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type><name type='SimpleName' identifier='encrypt'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='message'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='modPow'></name><scope type='NameExpr'><name type='SimpleName' identifier='encrypted'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='privateKey'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='modulus'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type><name type='SimpleName' identifier='decrypt'></name><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='encrypted'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='StringLiteralExpr' value=''></initializer><name type='SimpleName' identifier='s'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='s'></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='public  = '></left><right type='NameExpr'><name type='SimpleName' identifier='publicKey'></name></right></left><right type='StringLiteralExpr' value='\n'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='s'></name></target><value type='BinaryExpr' operator='PLUS'><left type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='private = '></left><right type='NameExpr'><name type='SimpleName' identifier='privateKey'></name></right></left><right type='StringLiteralExpr' value='\n'></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='PLUS'><target type='NameExpr'><name type='SimpleName' identifier='s'></name></target><value type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='modulus = '></left><right type='NameExpr'><name type='SimpleName' identifier='modulus'></name></right></value></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='s'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='toString'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='FieldAccessExpr'><name type='SimpleName' identifier='SIZE'></name><scope type='NameExpr'><name type='SimpleName' identifier='Integer'></name></scope></initializer><name type='SimpleName' identifier='N'></name><type type='PrimitiveType' identifier='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RSA'></name></type><arguments><argument type='NameExpr'><name type='SimpleName' identifier='N'></name></argument></arguments></initializer><name type='SimpleName' identifier='key'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='RSA'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='println'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='out'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='key'></name></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type><arguments><argument type='BinaryExpr' operator='MINUS'><left type='NameExpr'><name type='SimpleName' identifier='N'></name></left><right type='IntegerLiteralExpr' value='1'></right></argument><argument type='NameExpr'><name type='SimpleName' identifier='random'></name></argument></arguments></initializer><name type='SimpleName' identifier='message'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></variable></variables></expression><comment type='LineComment' content=' create random message, encrypt and decrypt'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='encrypt'></name><scope type='NameExpr'><name type='SimpleName' identifier='key'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='message'></name></argument></arguments></initializer><name type='SimpleName' identifier='encrypt'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='decrypt'></name><scope type='NameExpr'><name type='SimpleName' identifier='key'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='encrypt'></name></argument></arguments></initializer><name type='SimpleName' identifier='decrypt'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='println'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='out'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='message   = '></left><right type='NameExpr'><name type='SimpleName' identifier='message'></name></right></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='println'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='out'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='encrypted = '></left><right type='NameExpr'><name type='SimpleName' identifier='encrypt'></name></right></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='println'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='out'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='decrypted = '></left><right type='NameExpr'><name type='SimpleName' identifier='decrypt'></name></right></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='main'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></componentType></type></parameter></parameters></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></type></types></root>