<root type='CompilationUnit'><imports><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='EventQueue'><qualifier type='Name' identifier='awt'><qualifier type='Name' identifier='java'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='true' isStatic='false'><name type='Name' identifier='io'><qualifier type='Name' identifier='java'></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='BigInteger'><qualifier type='Name' identifier='math'><qualifier type='Name' identifier='java'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='ArrayList'><qualifier type='Name' identifier='util'><qualifier type='Name' identifier='java'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='Random'><qualifier type='Name' identifier='util'><qualifier type='Name' identifier='java'></qualifier></qualifier></name></import><import type='ImportDeclaration' isAsterisk='false' isStatic='false'><name type='Name' identifier='Scanner'><qualifier type='Name' identifier='util'><qualifier type='Name' identifier='java'></qualifier></qualifier></name></import></imports><types><type type='ClassOrInterfaceDeclaration' isInterface='false'><name type='SimpleName' identifier='RSA'></name><members><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='largePrime'></name><arguments><argument type='IntegerLiteralExpr' value='512'></argument></arguments></initializer><name type='SimpleName' identifier='p'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='largePrime'></name><arguments><argument type='IntegerLiteralExpr' value='512'></argument></arguments></initializer><name type='SimpleName' identifier='q'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='n'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='p'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='q'></name></argument></arguments></initializer><name type='SimpleName' identifier='n'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='getPhi'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='p'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='q'></name></argument></arguments></initializer><name type='SimpleName' identifier='phi'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='genE'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='phi'></name></argument></arguments></initializer><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='MethodCallExpr'><name type='SimpleName' identifier='extEuclid'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='phi'></name></argument></arguments></name></initializer><name type='SimpleName' identifier='d'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='println'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='out'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='p: '></left><right type='NameExpr'><name type='SimpleName' identifier='p'></name></right></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='println'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='out'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='q: '></left><right type='NameExpr'><name type='SimpleName' identifier='q'></name></right></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='println'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='out'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='n: '></left><right type='NameExpr'><name type='SimpleName' identifier='n'></name></right></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='println'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='out'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='Phi: '></left><right type='NameExpr'><name type='SimpleName' identifier='phi'></name></right></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='println'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='out'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='e: '></left><right type='NameExpr'><name type='SimpleName' identifier='e'></name></right></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='println'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='out'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='d: '></left><right type='NameExpr'><name type='SimpleName' identifier='d'></name></right></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='StringLiteralExpr' value='Encryption test example'></initializer><name type='SimpleName' identifier='message'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression><comment type='LineComment' content=' encryption / decryption example'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='stringCipher'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='message'></name></argument></arguments></initializer><name type='SimpleName' identifier='cipherMessage'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></variable></variables></expression><comment type='LineComment' content=' Convert string to numbers using a cipher'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='encrypt'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='cipherMessage'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='n'></name></argument></arguments></initializer><name type='SimpleName' identifier='encrypted'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></variable></variables></expression><comment type='LineComment' content=' Encrypt the ciphered message'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='decrypt'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='encrypted'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='d'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='n'></name></argument></arguments></initializer><name type='SimpleName' identifier='decrypted'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></variable></variables></expression><comment type='LineComment' content=' Decrypt the encrypted message'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='cipherToString'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='decrypted'></name></argument></arguments></initializer><name type='SimpleName' identifier='restoredMessage'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression><comment type='LineComment' content=' Uncipher the decrypted message to text'></comment></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='println'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='out'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='Original message: '></left><right type='NameExpr'><name type='SimpleName' identifier='message'></name></right></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='println'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='out'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='Ciphered: '></left><right type='NameExpr'><name type='SimpleName' identifier='cipherMessage'></name></right></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='println'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='out'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='Encrypted: '></left><right type='NameExpr'><name type='SimpleName' identifier='encrypted'></name></right></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='println'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='out'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='Decrypted: '></left><right type='NameExpr'><name type='SimpleName' identifier='decrypted'></name></right></argument></arguments></expression></statement><statement type='ExpressionStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='println'></name><scope type='FieldAccessExpr'><name type='SimpleName' identifier='out'></name><scope type='NameExpr'><name type='SimpleName' identifier='System'></name></scope></scope><arguments><argument type='BinaryExpr' operator='PLUS'><left type='StringLiteralExpr' value='Restored: '></left><right type='NameExpr'><name type='SimpleName' identifier='restoredMessage'></name></right></argument></arguments></expression></statement></statements></body><type type='VoidType'></type><name type='SimpleName' identifier='main'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='args'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></componentType></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='message'></name></target><value type='MethodCallExpr'><name type='SimpleName' identifier='toUpperCase'></name><scope type='NameExpr'><name type='SimpleName' identifier='message'></name></scope></value></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='StringLiteralExpr' value=''></initializer><name type='SimpleName' identifier='cipherString'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' identifier='INT'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='MethodCallExpr'><name type='SimpleName' identifier='charAt'></name><scope type='NameExpr'><name type='SimpleName' identifier='message'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='i'></name></argument></arguments></expression><type type='PrimitiveType' identifier='INT'></type></initializer><name type='SimpleName' identifier='ch'></name><type type='PrimitiveType' identifier='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='cipherString'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='cipherString'></name></left><right type='NameExpr'><name type='SimpleName' identifier='ch'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='UnaryExpr' operator='POSTFIX_INCREMENT'><expression type='NameExpr'><name type='SimpleName' identifier='i'></name></expression></expression></statement></statements></body><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='message'></name></scope></right></condition></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='valueOf'></name><scope type='NameExpr'><name type='SimpleName' identifier='String'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='cipherString'></name></argument></arguments></argument></arguments></initializer><name type='SimpleName' identifier='cipherBig'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></variable></variables></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='cipherBig'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type><name type='SimpleName' identifier='stringCipher'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='message'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='toString'></name><scope type='NameExpr'><name type='SimpleName' identifier='message'></name></scope></initializer><name type='SimpleName' identifier='cipherString'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='StringLiteralExpr' value=''></initializer><name type='SimpleName' identifier='output'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='IntegerLiteralExpr' value='0'></initializer><name type='SimpleName' identifier='i'></name><type type='PrimitiveType' identifier='INT'></type></variable></variables></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='parseInt'></name><scope type='NameExpr'><name type='SimpleName' identifier='Integer'></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='substring'></name><scope type='NameExpr'><name type='SimpleName' identifier='cipherString'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='i'></name></argument><argument type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='2'></right></argument></arguments></argument></arguments></initializer><name type='SimpleName' identifier='temp'></name><type type='PrimitiveType' identifier='INT'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='CastExpr'><expression type='NameExpr'><name type='SimpleName' identifier='temp'></name></expression><type type='PrimitiveType' identifier='CHAR'></type></initializer><name type='SimpleName' identifier='ch'></name><type type='PrimitiveType' identifier='CHAR'></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='output'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='output'></name></left><right type='NameExpr'><name type='SimpleName' identifier='ch'></name></right></value></expression></statement><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='i'></name></target><value type='BinaryExpr' operator='PLUS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='IntegerLiteralExpr' value='2'></right></value></expression></statement></statements></body><condition type='BinaryExpr' operator='LESS'><left type='NameExpr'><name type='SimpleName' identifier='i'></name></left><right type='MethodCallExpr'><name type='SimpleName' identifier='length'></name><scope type='NameExpr'><name type='SimpleName' identifier='cipherString'></name></scope></right></condition></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='output'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='String'></name></type><name type='SimpleName' identifier='cipherToString'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='message'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='multiply'></name><scope type='EnclosedExpr'><inner type='MethodCallExpr'><name type='SimpleName' identifier='subtract'></name><scope type='NameExpr'><name type='SimpleName' identifier='p'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='BigInteger'></name></scope></argument></arguments></inner></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='subtract'></name><scope type='NameExpr'><name type='SimpleName' identifier='q'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='BigInteger'></name></scope></argument></arguments></argument></arguments></initializer><name type='SimpleName' identifier='phi'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></variable></variables></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='phi'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type><name type='SimpleName' identifier='getPhi'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='p'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='q'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Random'></name></type></initializer><name type='SimpleName' identifier='randomInteger'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Random'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='probablePrime'></name><scope type='NameExpr'><name type='SimpleName' identifier='BigInteger'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='bits'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='randomInteger'></name></argument></arguments></initializer><name type='SimpleName' identifier='largePrime'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></variable></variables></expression></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='largePrime'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type><name type='SimpleName' identifier='largePrime'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='bits'></name><type type='PrimitiveType' identifier='INT'></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='equals'></name><scope type='NameExpr'><name type='SimpleName' identifier='b'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ZERO'></name><scope type='NameExpr'><name type='SimpleName' identifier='BigInteger'></name></scope></argument></arguments></condition><elseStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='gcd'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='b'></name></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='mod'></name><scope type='NameExpr'><name type='SimpleName' identifier='a'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='b'></name></argument></arguments></argument></arguments></expression></statement></statements></elseStmt><thenStmt type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='a'></name></expression></statement></statements></thenStmt></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type><name type='SimpleName' identifier='gcd'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='a'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='b'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='IfStmt'><condition type='MethodCallExpr'><name type='SimpleName' identifier='equals'></name><scope type='NameExpr'><name type='SimpleName' identifier='b'></name></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ZERO'></name><scope type='NameExpr'><name type='SimpleName' identifier='BigInteger'></name></scope></argument></arguments></condition><thenStmt type='ReturnStmt'><expression type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='a'></name></value><value type='FieldAccessExpr'><name type='SimpleName' identifier='ONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='BigInteger'></name></scope></value><value type='FieldAccessExpr'><name type='SimpleName' identifier='ZERO'></name><scope type='NameExpr'><name type='SimpleName' identifier='BigInteger'></name></scope></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></expression></thenStmt></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='extEuclid'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='b'></name></argument><argument type='MethodCallExpr'><name type='SimpleName' identifier='mod'></name><scope type='NameExpr'><name type='SimpleName' identifier='a'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='b'></name></argument></arguments></argument></arguments></initializer><name type='SimpleName' identifier='vals'></name><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></componentType></type></variable></variables></expression><comment type='LineComment' content=' { a, 1, 0 }'></comment></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='0'></index><name type='NameExpr'><name type='SimpleName' identifier='vals'></name></name></initializer><name type='SimpleName' identifier='d'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='vals'></name></name></initializer><name type='SimpleName' identifier='p'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='MethodCallExpr'><name type='SimpleName' identifier='subtract'></name><scope type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='1'></index><name type='NameExpr'><name type='SimpleName' identifier='vals'></name></name></scope><arguments><argument type='MethodCallExpr'><name type='SimpleName' identifier='multiply'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='divide'></name><scope type='NameExpr'><name type='SimpleName' identifier='a'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='b'></name></argument></arguments></scope><arguments><argument type='ArrayAccessExpr'><index type='IntegerLiteralExpr' value='2'></index><name type='NameExpr'><name type='SimpleName' identifier='vals'></name></name></argument></arguments></argument></arguments></initializer><name type='SimpleName' identifier='q'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></variable></variables></expression></statement><statement type='ReturnStmt'><expression type='ArrayCreationExpr'><elementType type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></elementType><initializer type='ArrayInitializerExpr'><values><value type='NameExpr'><name type='SimpleName' identifier='d'></name></value><value type='NameExpr'><name type='SimpleName' identifier='p'></name></value><value type='NameExpr'><name type='SimpleName' identifier='q'></name></value></values></initializer><levels><level type='ArrayCreationLevel'></level></levels></expression></statement></statements></body><type type='ArrayType' origin='TYPE'><componentType type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></componentType></type><name type='SimpleName' identifier='extEuclid'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='a'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='b'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Random'></name></type></initializer><name type='SimpleName' identifier='rand'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='Random'></name></type></variable></variables></expression></statement><statement type='ExpressionStmt'><expression type='VariableDeclarationExpr'><variables><variable type='VariableDeclarator'><initializer type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type><arguments><argument type='IntegerLiteralExpr' value='1024'></argument><argument type='NameExpr'><name type='SimpleName' identifier='rand'></name></argument></arguments></initializer><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></variable></variables></expression></statement><statement type='DoStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='e'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type><arguments><argument type='IntegerLiteralExpr' value='1024'></argument><argument type='NameExpr'><name type='SimpleName' identifier='rand'></name></argument></arguments></value></expression></statement><statement type='WhileStmt'><body type='BlockStmt'><statements><statement type='ExpressionStmt'><expression type='AssignExpr' operator='ASSIGN'><target type='NameExpr'><name type='SimpleName' identifier='e'></name></target><value type='ObjectCreationExpr'><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type><arguments><argument type='IntegerLiteralExpr' value='1024'></argument><argument type='NameExpr'><name type='SimpleName' identifier='rand'></name></argument></arguments></value></expression><comment type='LineComment' content=' while phi is smaller than e, look for a new e'></comment></statement></statements></body><condition type='MethodCallExpr'><name type='SimpleName' identifier='equals'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='min'></name><scope type='NameExpr'><name type='SimpleName' identifier='e'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='phi'></name></argument></arguments></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='phi'></name></argument></arguments></condition></statement></statements></body><condition type='UnaryExpr' operator='LOGICAL_COMPLEMENT'><expression type='MethodCallExpr'><name type='SimpleName' identifier='equals'></name><scope type='MethodCallExpr'><name type='SimpleName' identifier='gcd'></name><arguments><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='phi'></name></argument></arguments></scope><arguments><argument type='FieldAccessExpr'><name type='SimpleName' identifier='ONE'></name><scope type='NameExpr'><name type='SimpleName' identifier='BigInteger'></name></scope></argument></arguments></expression><comment type='LineComment' content=' if gcd(e,phi) isnt 1 then stay in loop'></comment></condition></statement><statement type='ReturnStmt'><expression type='NameExpr'><name type='SimpleName' identifier='e'></name></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type><name type='SimpleName' identifier='genE'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='phi'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='modPow'></name><scope type='NameExpr'><name type='SimpleName' identifier='message'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='e'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='n'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type><name type='SimpleName' identifier='encrypt'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='message'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='e'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='n'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='modPow'></name><scope type='NameExpr'><name type='SimpleName' identifier='message'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='d'></name></argument><argument type='NameExpr'><name type='SimpleName' identifier='n'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type><name type='SimpleName' identifier='decrypt'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='message'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='d'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='n'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></parameter></parameters></member><member type='MethodDeclaration'><body type='BlockStmt'><statements><statement type='ReturnStmt'><expression type='MethodCallExpr'><name type='SimpleName' identifier='multiply'></name><scope type='NameExpr'><name type='SimpleName' identifier='p'></name></scope><arguments><argument type='NameExpr'><name type='SimpleName' identifier='q'></name></argument></arguments></expression></statement></statements></body><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type><name type='SimpleName' identifier='n'></name><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier><modifier type='Modifier' keyword='STATIC'></modifier></modifiers><parameters><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='p'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></parameter><parameter type='Parameter' isVarArgs='false'><name type='SimpleName' identifier='q'></name><type type='ClassOrInterfaceType'><name type='SimpleName' identifier='BigInteger'></name></type></parameter></parameters></member></members><modifiers><modifier type='Modifier' keyword='PUBLIC'></modifier></modifiers></type></types></root>